# bot/utils/ai_checker.py

import requests
from typing import Optional, Tuple
from pathlib import Path
from bot.config import settings


class AIChecker:
    """
    –ö–ª–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—ñ AI –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Hugging Face API.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ bot.config.settings.
    """

    def __init__(self):
        self.headers = {"Authorization": f"Bearer {settings.HUGGINGFACE_TOKEN}"}
        self.text_model_url = settings.MODEL_TEXT_URL
        self.image_model_url = settings.MODEL_IMAGE_URL
        self.timeout = 30  # —Å–µ–∫—É–Ω–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

    def check_text_model(
        self, prompt: str = "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—É —Ü–∏—Ç–∞—Ç—É"
    ) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ.
        –ü–æ–≤–µ—Ä—Ç–∞—î (success, result), –¥–µ success - bool, result - —Ç–µ–∫—Å—Ç –∞–±–æ –ø–æ–º–∏–ª–∫–∞.
        """
        try:
            response = requests.post(
                self.text_model_url,
                headers=self.headers,
                json={"inputs": prompt, "wait_for_model": True},
                timeout=self.timeout,
            )

            if response.status_code == 200:
                return True, response.json()[0]["generated_text"]
            return False, f"Text model error {response.status_code}: {response.text}"

        except Exception as e:
            return False, f"Text model exception: {str(e)}"

    def check_image_model(
        self,
        prompt: str = "–ö—ñ—Ç —É –∫–æ—Å–º–æ—Å—ñ, —Ü–∏—Ñ—Ä–æ–≤–∏–π –∞—Ä—Ç",
        save_path: Optional[str] = None,
    ) -> Tuple[bool, str]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É –º–æ–¥–µ–ª—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å.
        –ü–æ–≤–µ—Ä—Ç–∞—î (success, result), –¥–µ success - bool, result - —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∞–±–æ –ø–æ–º–∏–ª–∫–∞.
        """
        try:
            if save_path is None:
                save_path = Path("temp_ai_check_image.png").absolute()

            response = requests.post(
                self.image_model_url,
                headers=self.headers,
                json={"inputs": prompt, "wait_for_model": True},
                timeout=self.timeout,
            )

            if response.status_code == 200:
                with open(save_path, "wb") as f:
                    f.write(response.content)
                return True, str(save_path)
            return False, f"Image model error {response.status_code}: {response.text}"

        except Exception as e:
            return False, f"Image model exception: {str(e)}"

    def run_full_check(self) -> dict:
        """
        –í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–±–æ—Ö –º–æ–¥–µ–ª–µ–π.
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
        """
        results = {
            "text_model": {"url": self.text_model_url, "status": "pending"},
            "image_model": {"url": self.image_model_url, "status": "pending"},
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –º–æ–¥–µ–ª—ñ
        text_success, text_result = self.check_text_model()
        results["text_model"]["status"] = "working" if text_success else "failed"
        results["text_model"]["result"] = text_result

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        img_success, img_result = self.check_image_model()
        results["image_model"]["status"] = "working" if img_success else "failed"
        results["image_model"]["result"] = img_result

        return results


if __name__ == "__main__":
    # –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    checker = AIChecker()

    print("üîç Running AI models health check...")
    results = checker.run_full_check()

    print("\nüìù Text model results:")
    print(f"Status: {results['text_model']['status']}")
    print(f"URL: {results['text_model']['url']}")
    print(f"Test output: {results['text_model']['result'][:200]}...")

    print("\nüñºÔ∏è Image model results:")
    print(f"Status: {results['image_model']['status']}")
    print(f"URL: {results['image_model']['url']}")
    print(f"Image saved to: {results['image_model']['result']}")
