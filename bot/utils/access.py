from aiogram.types import Message, CallbackQuery
from functools import lru_cache, wraps
from loguru import logger
from typing import Union

from bot.config import settings


@lru_cache(maxsize=1)
def get_admin_ids() -> list[int]:
    """–ö–µ—à–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    return settings.admin_ids


def is_admin(user_id: int) -> bool:
    """–ù–∞–¥—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in get_admin_ids()


def admin_only(handler):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞"""

    @wraps(handler)
    async def wrapper(event: Union[Message, CallbackQuery], *args, **kwargs):
        try:
            user = event.from_user
            if not user:
                logger.error("–ü–æ–¥—ñ—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                return

            if not is_admin(user.id):
                if isinstance(event, CallbackQuery):
                    await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
                else:
                    await event.answer("‚õî –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
                return

            return await handler(event, *args, **kwargs)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_only: {e}")
            if isinstance(event, CallbackQuery):
                await event.answer("üîß –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É")
            raise

    return wrapper
