from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

from bot.utils.callback_data import BotCallback


router = Router()


@router.callback_query(BotCallback.filter(F.action == "test_ai"))
async def handle_test_ai(callback: CallbackQuery, state: FSMContext):
    try:
        # 1. –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
        logger.debug(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ test_ai")

        # 2. –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (–≤–∞–∂–ª–∏–≤–æ —Ä–æ–±–∏—Ç–∏ –ø–µ—Ä—à–∏–º)
        await callback.answer("üîÑ –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É...", show_alert=False)

        # 3. –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
        await callback.message.answer(
            "‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ!", parse_mode="Markdown"
        )

        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π debug
        logger.debug(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {callback.from_user.id}")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_test_ai: {str(e)}")
        await callback.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞", show_alert=True)
