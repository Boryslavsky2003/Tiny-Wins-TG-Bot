from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.states import ChannelsState
from bot.utils.callback_data import BotCallback


router = Router()


@router.callback_query(BotCallback.filter(F.action == "get_id"))
async def handle_get_id(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer("")
        await callback.message.edit_reply_markup()

        await callback.message.answer(
            "üëÄ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É –∞–±–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
            parse_mode="Markdown",
        )

        await state.set_state(ChannelsState.waiting_for_forward)
        await callback.answer()

    except Exception as e:
        await callback.answer("üîß –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É", show_alert=True)
        raise e


@router.message(ChannelsState.waiting_for_forward)
async def show_id_handler(message: Message, state: FSMContext):
    try:
        chat = message.forward_from_chat
        user = message.forward_from

        if chat and chat.type == "channel":
            response = f"üì¢ *–ö–∞–Ω–∞–ª:*\nID: `{chat.id}`\n–ù–∞–∑–≤–∞: {chat.title}"
        elif user:
            response = f"üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:*\nID: `{user.id}`\n–Ü–º'—è: {user.full_name}"
        else:
            response = (
                "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ *–∫–∞–Ω–∞–ª—É* –∞–±–æ *–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*."
            )

        await message.answer(response, parse_mode="Markdown")

    finally:
        await state.clear()
