from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from loguru import logger
import os

from bot.states import CreateImageState
from bot.utils.huggingface import huggingface_image
from bot.utils.callback_data import BotCallback


router = Router()


@router.callback_query(BotCallback.filter(F.action == "create_image_ai"))
async def handle_create_image_ai(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –û–ø–∏—à—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:")
    await state.set_state(CreateImageState.waiting_for_prompt)


@router.message(CreateImageState.waiting_for_prompt)
async def handle_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    image_path = "ai/ai_image_gen/generated_image.png"

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")

    try:
        huggingface_image.generate_image(prompt, image_path)

        if os.path.exists(image_path) and os.path.getsize(image_path) > 0:
            photo = FSInputFile(image_path)
            await message.answer_photo(
                photo=photo,
                caption=f"üñºÔ∏è –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–∞ –æ–ø–∏—Å–æ–º: _{prompt}_",
                parse_mode="Markdown",
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –æ–ø–∏—Å."
            )
    except Exception as e:
        logger.error(f"Image generation error: {str(e)}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
    finally:
        await state.clear()
