from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from bot.states import ChannelsState
from bot.config import settings
from functools import lru_cache
import logging


router = Router()

logger = logging.getLogger(__name__)


@lru_cache(maxsize=1)
def get_admin_ids() -> list[int]:
    """–ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
    try:
        return [int(admin_id.strip()) for admin_id in settings.ADMIN_ID.split(",")]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ADMIN_ID: {e}")
        return []


@router.message(Command("i_admin"))
async def check_admin_status(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        admin_ids = get_admin_ids()

        logger.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω–∞: user_id={user_id}, admins={admin_ids}")

        if not admin_ids:
            await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return

        if user_id in admin_ids:
            await message.answer(
                "‚úÖ –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!\n–î–æ—Å—Ç—É–ø–Ω—ñ –∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏: /admin_panel"
            )
        else:
            await message.answer("‚õî –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.set_state(ChannelsState.waiting_for_channel_id)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω–∞: {e}")
        await message.answer("üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")
